name: Build and Release Tools

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Get changed files
        id: changed-files
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          else
            git fetch origin main
            git diff origin/main --name-only > changed_files.txt
          fi
          echo "CHANGED_FILES=$(cat changed_files.txt)" >> $GITHUB_ENV

      - name: Build tools
        shell: bash
        run: |
          mkdir -p tools
          for tool_dir in */; do
            py_dir="$tool_dir"
            py_file="${py_dir%/}.py"

            if grep -q "$py_dir" <<< "$CHANGED_FILES" && [ -f "$py_dir/$py_file" ]; then
              echo "Building $tool_dir..."
              cd $tool_dir
              pip install -r requirements.txt
              pyinstaller --onefile $tool_dir.py
              mv "dist/${tool_dir%/}.exe" "../tools/"
              cd ..
            fi
          done

      - name: Commit built tools
        shell: bash
        run: |
          if git diff --quiet tools/; then
            echo "No changes in tools. Skipping commit."
          else
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add tools/
            git commit -m "Add built tools"
            git push
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tools
          path: tools/

  release:
  name: Create GitHub Release
  needs: build
  runs-on: ubuntu-latest

  steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        name: tools
        path: tools/

    - name: Set up GitHub CLI
      uses: cli/cli-action@v2

    - name: Generate version tag
      id: version
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo="${{ github.repository }}"

        # Get the latest tools-v* tag
        latest_tag=$(gh release list --repo "$repo" --limit 100 | grep '^tools-v' | cut -f1 | sort -V | tail -n1)

        if [ -z "$latest_tag" ]; then
          next_version="tools-v1.0.0"
        else
          version="${latest_tag#tools-v}"  # Strip prefix
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          next_version="tools-v$major.$minor.$patch"
        fi

        echo "VERSION=$next_version" >> $GITHUB_ENV
        echo "Generated version: $next_version"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        files: tools/*.exe
        fail_on_unmatched_files: true
