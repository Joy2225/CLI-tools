name: Build and Release Tools

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Get changed files
        id: changed-files
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          else
            git fetch origin main
            git diff origin/main --name-only > changed_files.txt
          fi
          echo "CHANGED_FILES=$(cat changed_files.txt)" >> $GITHUB_ENV

      - name: Build tools
        shell: bash
        run: |
          mkdir -p tools
          for tool_dir in */; do
            py_dir="$tool_dir"
            py_file="${py_dir%/}.py"

            if grep -q "$py_dir" <<< "$CHANGED_FILES" && [ -f "$py_dir/$py_file" ]; then
              echo "Building $tool_dir..."
              cd $tool_dir
              pip install -r requirements.txt
              pyinstaller --onefile $tool_dir.py
              mv "dist/${tool_dir%/}.exe" "../tools/"
              cd ..
            fi
          done

      - name: Commit updated tools
        shell: bash
        id: commit
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add tools/
          if ! git diff --cached --quiet; then
            git commit -m "Update built tools"
            git push
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          - name: Release tools
            run: |
              tools_dir="tools"
              for tool_path in "$tools_dir"/*.exe; do
            tool_name=$(basename "$tool_path" .exe)
            release_tag="${tool_name}-v1.0.0"

            # Check if release exists
            release_info=$(gh release view "$release_tag" --json id,assets --repo "${{ github.repository }}" 2>/dev/null || echo "Not Found")

            if [ "$release_info" = "Not Found" ]; then
              echo "Creating new release for $tool_name..."
              gh release create "$release_tag" "$tool_path" --title "$tool_name v1.0.0" --notes "Initial release of $tool_name" --repo "${{ github.repository }}"
            else
              release_id=$(echo "$release_info" | jq -r '.id')
              asset_url=$(echo "$release_info" | jq -r ".assets[] | select(.name == \"$(basename "$tool_path")\") | .url")

              if [ -n "$asset_url" ]; then
                echo "Checking if $tool_name needs an update..."
                asset_updated_at=$(echo "$release_info" | jq -r ".assets[] | select(.name == \"$(basename "$tool_path")\") | .updated_at")
                tool_mtime=$(date -r "$tool_path" --iso-8601=seconds)

                if [[ "$tool_mtime" > "$asset_updated_at" ]]; then
              echo "Updating $tool_name..."
              gh release delete-asset "$release_id" "$(basename "$tool_path")" --repo "${{ github.repository }}"
              gh release upload "$release_tag" "$tool_path" --repo "${{ github.repository }}"
                else
              echo "No updates for $tool_name, skipping..."
                fi
              else
                echo "Adding $tool_name to existing release..."
                gh release upload "$release_tag" "$tool_path" --repo "${{ github.repository }}"
              fi
            fi
              done
