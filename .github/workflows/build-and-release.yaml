name: Auto Build & Release Tools

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    permissions:
      contents: write  # Required for GitHub release creation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install pyinstaller

      - name: Detect changed or unreleased tools
        id: detect
        shell: bash
        run: |
          git fetch --prune --unshallow || true

          if git rev-parse HEAD^ &>/dev/null; then
            base_ref=$(git rev-parse HEAD^)
          else
            base_ref=$(git rev-list --max-parents=0 HEAD)
          fi

          changed=$(git diff --name-only "$base_ref" HEAD | grep -E '^([^/]+)/\1\.py$' | cut -d/ -f1 | sort -u || true)

          unreleased=()
          for tool_exe in tools/*.exe; do
            [ -e "$tool_exe" ] || continue
            tool=$(basename "$tool_exe" .exe)
            if ! gh release list --limit 100 | grep -q "^${tool}-v"; then
              unreleased+=("$tool")
            fi
          done

          all_tools=$(echo -e "$changed\n${unreleased[@]}" | sort -u)
          echo "Tools to build/release: $all_tools"

          echo "tools_to_release=${all_tools}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and release tools
        if: steps.detect.outputs.tools_to_release != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for tool in ${{ steps.detect.outputs.tools_to_release }}; do
            echo "Processing $tool..."
            cd "$tool" || continue

            pip install -r requirements.txt || true
            pyinstaller --onefile "$tool.py"

            exe_path="dist/$tool.exe"
            mkdir -p ../tools
            cp "$exe_path" ../tools/

            cd ..

            # Determine next tag
            prefix="${tool}-v"
            existing_tags=$(gh release list --limit 100 --json tagName -q '.[].tagName' | grep "^$prefix" | sort -V)
            if [[ -z "$existing_tags" ]]; then
              version="${prefix}1.0.0"
            else
              latest=$(echo "$existing_tags" | tail -n1 | sed "s/^$prefix//")
              IFS='.' read -r major minor patch <<< "$latest"
              patch=$((patch + 1))
              version="${prefix}${major}.${minor}.${patch}"
            fi

            echo "Creating release: $version"
            gh release create "$version" "tools/$tool.exe" --title "$tool $version" --notes "Auto-release for $tool"
          done
