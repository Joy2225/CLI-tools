name: Build and Release Tools

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Get changed files
        id: changed-files
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          else
            git fetch origin main
            git diff origin/main --name-only > changed_files.txt
          fi
          echo "CHANGED_FILES=$(cat changed_files.txt)" >> $GITHUB_ENV

      - name: Build tools
        shell: bash
        run: |
          mkdir -p tools
          for tool_dir in */; do
            py_dir="$tool_dir"
            py_file="${py_dir%/}.py"

            if grep -q "$py_dir" <<< "$CHANGED_FILES" && [ -f "$py_dir/$py_file" ]; then
              echo "Building $tool_dir..."
              cd $tool_dir
              pip install -r requirements.txt
              pyinstaller --onefile $tool_dir.py
              mv "dist/${tool_dir%/}.exe" "../tools/"
              cd ..
            fi
          done

      - name: Auto-release all tools with version increment
        shell: bash
        run: |
          tools_dir="tools"
          repo="${{ github.repository }}"

          # Get latest version tag starting with tools-v*
          latest_tag=$(gh release list --repo "$repo" --limit 100 | grep '^tools-v' | cut -f1 | sort -V | tail -n1)

          if [ -z "$latest_tag" ]; then
            next_version="tools-v1.0.0"
          else
            # Extract major, minor, patch and increment patch
            version="${latest_tag#tools-v}"  # Strip 'tools-v'
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            next_version="tools-v$major.$minor.$patch"
          fi

          echo "Creating new release: $next_version"

          # Create release with all tools
          gh release create "$next_version" "$tools_dir"/*.exe \
            --title "Tools ${next_version#tools-v}" \
            --notes "Release of all tools (auto-versioned)" \
            --repo "$repo"
