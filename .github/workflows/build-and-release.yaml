name: Build and Release Tools

on:
  workflow_dispatch:  # Manual trigger only

permissions:
  contents: write

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install pyinstaller

      - name: Build Windows tools
        shell: bash
        run: |
          mkdir -p tools/windows
          
          # Build buildqbdi (Windows-only)
          cd buildqbdi
          pip install -r requirements.txt
           pyinstaller --onefile --noconfirm buildqbdi.py
          mv dist/buildqbdi.exe ../tools/windows/
          cd ..
          
          # Build frid (Windows version)
          cd frid
          pip install -r requirements.txt
          pyinstaller --onefile --noconfirm frid.py
          mv dist/frid.exe ../tools/windows/
          cd ..

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-tools
          path: tools/windows/

  build_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev

      - name: Install Python dependencies
        run: |
          pip install pyinstaller

      - name: Build Linux tools
        shell: bash
        run: |
          mkdir -p tools/linux
          
          # Build frid (Linux version)
          cd frid
          pip install -r requirements.txt
          pyinstaller --onefile --noconfirm frid.py
          mv dist/frid ../tools/linux/
          cd ..

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-tools
          path: tools/linux/

  release:
    name: Create Release
    needs: [build_windows, build_linux]
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-tools
          path: release_assets/windows

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-tools
          path: release_assets/linux

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Generate version tag
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo="${{ github.repository }}"
          
          # Get latest tag with tools-v prefix
          latest_tag=$(gh release list --repo "$repo" --limit 100 --json tagName | jq -r '.[].tagName' | grep '^tools-v' | sort -V | tail -n1)
          
          if [ -z "$latest_tag" ]; then
            next_version="tools-v1.0.0"
          else
            version="${latest_tag#tools-v}"  # Strip prefix
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            next_version="tools-v$major.$minor.$patch"
          fi
          
          echo "VERSION=$next_version" >> $GITHUB_ENV
          echo "Generated version: $next_version"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          files: |
            release_assets/windows/*
            release_assets/linux/*
          fail_on_unmatched_files: true